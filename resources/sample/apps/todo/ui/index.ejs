<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/assets/img/favicon.png">

    <title>Anysols</title>

    <!--
        Stylesheets and Preprocessors
    -->
    <link href="/anysols-ui/3rd-party/css/bootstrap.min.css" rel="stylesheet">
    <link href="/anysols-ui/styles/theme.css" rel="stylesheet">
    <link href="/anysols-ui/styles/base.css" rel="stylesheet">
    <link href="/app/todo/assets/styles/todo.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Noto+Sans" rel="stylesheet">
    <style>
        body {
            padding-top: 38.8px; /* Show it is fixed to the top */
        }
    </style>
    <!--
       Scripts
    -->
    <script src="/anysols-ui/3rd-party/js/jquery-3.3.1.min.js"></script>
    <script src="/anysols-ui/3rd-party/js/popper.min.js"></script>
    <script src="/anysols-ui/3rd-party/js/bootstrap.min.js"></script>
    <script defer src="/anysols-ui/3rd-party/js/fontawesome.min.js"></script>

</head>

<body>

<div id="header-app"></div>
<div id="todo-app"></div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js"></script>
<script type="text/babel">
    async function postData(url = '', data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
            method: 'POST', // *GET, POST, PUT, DELETE, etc.
            headers: {
                'Content-Type': 'application/json'
                // 'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: JSON.stringify(data) // body data type must match "Content-Type" header
        });
        return await response.json(); // parses JSON response into native JavaScript objects
    }
    class Header extends React.Component {
        render() {
            return (<nav
                className="navbar navbar-expand-md header-navigation fixed-top justify-content-between p-0 shadow-sm">
                <a className="navbar-brand mx-0 py-0 pl-3" href="#">
                    <img src="/app/todo/assets/app.png" className="app-icon"/>
                </a>
                <div className="py-2 px-2 mr-auto">
                    My Todo List
                </div>
                <a className="app-close" href="/home">
                    <i className="fas fa-times"/>
                </a>
            </nav>);
        }
    }
    ReactDOM.render(
        <Header/>,
        document.getElementById('header-app')
    );

    class Task extends React.Component {
        render() {
            const cls = [];
            if (this.props.completed) {
                cls.push('task-completed');
            }
            return (<div className={"task shadow-sm " + cls.join(' ')} id={this.props.taskId}>
                <div className="task-content">
                    <div className="task-description">{this.props.description}</div>
                    <div className="task-menu"><i className="fas fa-ellipsis-h"/></div>
                    <div className="task-checkbox" onClick={this.props.onTaskSelect}><i className="fas fa-check"/></div>
                </div>
                <div className="task-menu-options">
                    <div className="option">
                        Edit
                    </div>
                    <div className="option">
                        Delete
                    </div>
                </div>
            </div>)
        }
    }

    class TaskApplication extends React.Component {
        constructor(props) {
            super(props);
            const that = this;
            this.state = {
                loading: true,
                tasks: []
            };
            let tasks = [];
            fetch('/api/platform/collection/todo?sort={created_at:-1}').then(function (response) {
                if (response.status !== 200) {
                    console.log('Looks like there was a problem. Status Code: ' +
                        response.status);
                    return;
                }

                // Examine the text in the response
                response.json().then(function (data) {
                    that.setState({
                        loading: false,
                        tasks: data
                    })
                });
            });
        }

        selectedTask(task) {
            const that = this;
            if (task.status == 'done') {
                task.status = 'undone'
            } else {
                task.status = 'done';
            }
            postData('/api/platform/collection/todo', {
                "_id": task._id,
                "status": task.status
            }).then(() => {
                that.setState({tasks: this.state.tasks});
            })
        }

        renderBody() {
            const that = this;
            return (<div className="row">
                <div className="col-4">
                    <h2 className="sub-title">Tasks</h2>
                    <div className="tasks">
                        {
                            this.state.tasks.map((task, i) => {
                                if (task.status !== 'done')
                                    return <Task key={i} taskId={task.id} description={task.description}
                                                 onTaskSelect={() => {
                                                     that.selectedTask(task)
                                                 }}/>;
                            })
                        }
                    </div>
                </div>
                <div className="col-4">
                    <h2 className="sub-title">Completed Tasks</h2>
                    <div className="tasks">
                        {
                            this.state.tasks.map((task, i) => {
                                if (task.status === 'done')
                                    return <Task key={i} description={task.description}
                                                 completed="true"
                                                 onTaskSelect={() => {
                                                     that.selectedTask(task)
                                                 }}/>;
                            })
                        }
                    </div>
                </div>
            </div>);
        }

        render() {
            const that = this;
            return (<div className="main">
                    <div className="container-fluid pt-4">
                        {
                            !this.state.loading
                                ? this.renderBody()
                                : <span className="spinner-grow spinner-border-sm" role="status"/>
                        }
                    </div>
                </div>
            );
        }
    }

    ReactDOM.render(
        <TaskApplication/>,
        document.getElementById('todo-app')
    );
</script>


<script defer src="/anysols-ui/3rd-party/js/jquery.smoothwheel.js"></script>
</body>
</html>


